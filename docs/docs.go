// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admins": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of all admins (with or without pagination)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all admins",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search keyword if with pagination",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number if with pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page if with pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With pagination or not (default true)",
                        "name": "pagination",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "With pagination",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_AdminPaginationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new admin account only for super admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create new admin (only for super admin)",
                "parameters": [
                    {
                        "description": "Admin data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success create admin",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            }
        },
        "/admins/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve admin details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin Detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete admin by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete Admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update admin information by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update Admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Admin Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "404": {
                        "description": "Admin not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate admin and return access \u0026 refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login admin",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success login",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "404": {
                        "description": "Admin account not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Get a new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success refresh access token",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-dto_RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid \u003caccess_token\u003e",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            }
        },
        "/uploads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload single or multiple files",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "Upload one or multiple files",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Files to upload",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of uploaded file URLs",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseSuccess-array_string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AdminPaginationResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminResponse"
                    }
                },
                "max_page": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "\u003cuuid\u003e"
                },
                "name": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "user1234"
                },
                "phone_number": {
                    "type": "string",
                    "example": "081234567891"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Role"
                        }
                    ],
                    "example": "user"
                }
            }
        },
        "dto.CreateAdminRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "user1234"
                },
                "phone_number": {
                    "type": "string",
                    "example": "081234567891"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "secret123"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "\u003caccess_token_here\u003e"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "\u003crefresh_token_here\u003e"
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "\u003crefresh_token_here\u003e"
                }
            }
        },
        "dto.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "\u003cnew_access_token_here\u003e"
                }
            }
        },
        "dto.UpdateAdminRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "user1234"
                },
                "phone_number": {
                    "type": "string",
                    "example": "081234567891"
                }
            }
        },
        "entity.Role": {
            "type": "string",
            "enum": [
                "super admin",
                "admin"
            ],
            "x-enum-varnames": [
                "SuperAdminRole",
                "AdminRole"
            ]
        },
        "response.SwaggerResponseError": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Invalid input"
                },
                "status": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-array_dto_AdminResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-array_string": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-dto_AdminPaginationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AdminPaginationResponse"
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-dto_AdminResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AdminResponse"
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-dto_LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.LoginResponse"
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.SwaggerResponseSuccess-dto_RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.RefreshTokenResponse"
                },
                "message": {
                    "type": "string"
                },
                "meta": {},
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "nawasena-backend-production.up.railway.app",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Nawasena API",
	Description:      "API documentation for Nawasena project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
