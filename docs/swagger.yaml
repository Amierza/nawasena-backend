basePath: /api/v1
definitions:
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: secret123
        type: string
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: <access_token_here>
        type: string
      refresh_token:
        example: <refresh_token_here>
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        example: <refresh_token_here>
        type: string
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        example: <new_access_token_here>
        type: string
    type: object
  response.SwaggerResponseError:
    properties:
      error: {}
      message:
        example: Invalid input
        type: string
      status:
        example: false
        type: boolean
      timestamp:
        type: string
    type: object
  response.SwaggerResponseSuccess-array_string:
    properties:
      data:
        items:
          type: string
        type: array
      message:
        example: Success create user
        type: string
      meta: {}
      status:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.SwaggerResponseSuccess-dto_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/dto.LoginResponse'
      message:
        example: Success create user
        type: string
      meta: {}
      status:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
  response.SwaggerResponseSuccess-dto_RefreshTokenResponse:
    properties:
      data:
        $ref: '#/definitions/dto.RefreshTokenResponse'
      message:
        example: Success create user
        type: string
      meta: {}
      status:
        example: true
        type: boolean
      timestamp:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: nawasena-backend-production.up.railway.app
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for Nawasena project
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Nawasena API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate admin and return access & refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success login
          schema:
            $ref: '#/definitions/response.SwaggerResponseSuccess-dto_LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.SwaggerResponseError'
        "404":
          description: Admin account not found
          schema:
            $ref: '#/definitions/response.SwaggerResponseError'
      summary: Login admin
      tags:
      - Auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success refresh access token
          schema:
            $ref: '#/definitions/response.SwaggerResponseSuccess-dto_RefreshTokenResponse'
        "400":
          description: Invalid <access_token>
          schema:
            $ref: '#/definitions/response.SwaggerResponseError'
      summary: Refresh access token
      tags:
      - Auth
  /uploads:
    post:
      consumes:
      - application/json
      description: Upload single or multiple files
      parameters:
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: List of uploaded file URLs
          schema:
            $ref: '#/definitions/response.SwaggerResponseSuccess-array_string'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.SwaggerResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SwaggerResponseError'
      security:
      - BearerAuth: []
      summary: Upload one or multiple files
      tags:
      - Upload
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
